/**
B. Chocolates
time limit per test2 seconds
memory limit per test256 megabytes
You went to the store, selling n
 types of chocolates. There are ai
 chocolates of type i
 in stock.

You have unlimited amount of cash (so you are not restricted by any prices) and want to buy as many chocolates as possible. However if you buy xi
 chocolates of type i
 (clearly, 0≤xi≤ai
), then for all 1≤j<i
 at least one of the following must hold:

xj=0
 (you bought zero chocolates of type j
)
xj<xi
 (you bought less chocolates of type j
 than of type i
)
For example, the array x=[0,0,1,2,10]
 satisfies the requirement above (assuming that all ai≥xi
), while arrays x=[0,1,0]
, x=[5,5]
 and x=[3,2]
 don't.

Calculate the maximum number of chocolates you can buy.

Input
The first line contains an integer n
 (1≤n≤2⋅105
), denoting the number of types of chocolate.

The next line contains n
 integers ai
 (1≤ai≤109
), denoting the number of chocolates of each type.

Output
Print the maximum number of chocolates you can buy.

Examples
InputCopy
5
1 2 1 3 6
OutputCopy
10
InputCopy
5
3 2 5 4 10
OutputCopy
20
InputCopy
4
1 1 1 1
OutputCopy
1
Note
In the first example, it is optimal to buy: 0+0+1+3+6
 chocolates.

In the second example, it is optimal to buy: 1+2+3+4+10
 chocolates.

In the third example, it is optimal to buy: 0+0+0+1
 chocolates.


**/

#include <bits/stdc++.h>
using namespace std;

int main() {
	long long n;
	cin>>n;
	
	long long chocolate[n];
	for(int i=0;i<n;i++){
	    cin>>chocolate[i];
	    
	}
	long long ans =0;
	ans += chocolate[n-1];
   long long	maxi = chocolate[n-1] -1;
	for(int i=n-2;i>=0;i--){
	    ans += min(maxi,chocolate[i]);
	    maxi = min(maxi-1,chocolate[i]-1);
	    if(maxi<=0) break;
	}
	cout<<ans<<"\n";

}
